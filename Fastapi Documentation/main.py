""" Example of FastAPI Open API documentation with customizations. """
from fastapi import FastAPI, APIRouter

# Step 1: Customizing Basic Metadata
app = FastAPI(
    title="My Awesome API",
    description="This API provides amazing features for managing widgets.",
    version="2.1.0",
    contact={
        "name": "API Support",
        "email": "support@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)

# Step 2: Tagging and Grouping Endpoints
items_router = APIRouter(prefix="/items", tags=["Items"])

@items_router.get("/")
async def get_items():
    return ["item1", "item2"]

app.include_router(items_router)

"""
Step 3: Adding Rich Descriptions and Examples per Endpoint
Enhance the individual route docs by providing:

Summary: a brief summary of what the endpoint does
Description: detailed markdown explanation rendered in the docs
Response descriptions: clarify possible HTTP responses
Examples: sample request bodies and responses
"""

from fastapi import Body, status

@app.post(
    "/items/",
    summary="Create an item",
    description="Creates an item with all the required information. Make sure the name is unique.",
    status_code=status.HTTP_201_CREATED,
    response_description="The created item information",
)
async def create_item(item: dict = Body(..., example={"name": "Foo", "price": 42})):
    return item

# Step 4: Marking Deprecated Endpoints and Fields
@app.get("/legacy-endpoint/", deprecated=True)
async def legacy():
    return {"msg": "This endpoint is deprecated and will be removed in v3."}

#In Pydantic models, deprecate fields using the Field function:
from pydantic import BaseModel, Field

class User(BaseModel):
    username: str
    old_field: str = Field(..., deprecated=True)


"""
Step 5: Overriding the OpenAPI Schema for Customizations
For more advanced control, override the app.openapi method.
"""
from fastapi.openapi.utils import get_openapi

"""
Step 6: Caching the OpenAPI Schema
If your app regenerates docs often or runs in serverless environments, cache the OpenAPI schema to improve performance (as in the above example).
"""


"""
Step 7: Generating API SDKs and Client Libraries
The OpenAPI schema generated by FastAPI allows you to generate SDKs in multiple languages automatically using tools like:

OpenAPI Generator
Swagger Codegen
Postman
Generate client code or SDKs by importing your OpenAPI JSON spec (/openapi.json). Keeping your documentation accurate and rich means clients benefit from reliable, up-to-date integrations.
"""

"""
Bonus: Using Tools Like Scalar for Enhanced API Docs
uv pip install scalar-fastapi
"""

from scalar_fastapi import get_scalar_api_reference

@app.get("/scalar", include_in_schema=False)
async def scalar_html():
    return get_scalar_api_reference(
        openapi_url=app.openapi_url,
        title=app.title,
    )



def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="Custom API",
        version="2.0.0",
        description="This is a custom OpenAPI schema with additional metadata.",
        routes=app.routes,
    )
    # Add logos, terms of service, external docs, or custom extensions
    openapi_schema["info"]["x-logo"] = {
        "url": "https://example.com/logo.png"
    }
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi


def main():
    import uvicorn
    uvicorn.run(
        "main:app",
        host="localhost",
        port=8000,
        reload=True,
        log_level="info"
    )

if __name__ == "__main__":
    main()