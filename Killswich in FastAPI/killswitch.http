# FastAPI Killswitch Demo - HTTP Test Requests
# Test all killswitch endpoints and business logic
# Run with: pip install httpie or use VS Code REST Client extension

@baseUrl = http://127.0.0.1:8000

###############################################
# 1. HEALTH & STATUS CHECKS
###############################################

### Check system health
GET {{baseUrl}}/api/health

### Get all killswitch states
GET {{baseUrl}}/admin/killswitches

### Get specific killswitch status
GET {{baseUrl}}/admin/killswitch/order_creation

### Get error statistics
GET {{baseUrl}}/admin/error-stats

###############################################
# 2. BUSINESS ENDPOINTS (Protected by Killswitches)
###############################################

### Create order (should work when killswitches enabled)
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "user_id": "user123",
  "items": [
    {"product_id": "laptop", "quantity": 1, "price": 999.99},
    {"product_id": "mouse", "quantity": 2, "price": 29.99}
  ],
  "payment_method": "credit_card",
  "total_amount": 1059.97
}

### Create order with large amount (test high-value processing)
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "user_id": "vip_user456",
  "items": [
    {"product_id": "server", "quantity": 10, "price": 2000.00}
  ],
  "payment_method": "corporate_card",
  "total_amount": 20000.00
}

###############################################
# 3. KILLSWITCH MANAGEMENT
###############################################

### Disable order creation (CRITICAL KILLSWITCH)
POST {{baseUrl}}/admin/killswitch/order_creation
Content-Type: application/json

{
  "feature": "order_creation",
  "enabled": false,
  "reason": "Testing order disable - high error rate detected",
  "updated_by": "admin_user"
}

### Try creating order after disabling (should fail)
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "user_id": "test_user",
  "items": [{"product_id": "test", "quantity": 1, "price": 10.00}],
  "payment_method": "test_card",
  "total_amount": 10.00
}

### Re-enable order creation
POST {{baseUrl}}/admin/killswitch/order_creation
Content-Type: application/json

{
  "feature": "order_creation",
  "enabled": true,
  "reason": "Issue resolved - re-enabling orders",
  "updated_by": "admin_user"
}

### Disable payment processing (orders should work as "pay later")
POST {{baseUrl}}/admin/killswitch/payment_processing
Content-Type: application/json

{
  "feature": "payment_processing",
  "enabled": false,
  "reason": "Payment gateway maintenance",
  "updated_by": "ops_team"
}

### Create order with payments disabled (should create pending order)
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "user_id": "customer789",
  "items": [{"product_id": "book", "quantity": 3, "price": 15.99}],
  "payment_method": "credit_card", 
  "total_amount": 47.97
}

### Re-enable payment processing
POST {{baseUrl}}/admin/killswitch/payment_processing
Content-Type: application/json

{
  "feature": "payment_processing",
  "enabled": true,
  "reason": "Payment gateway maintenance completed",
  "updated_by": "ops_team"
}

### Disable inventory service
POST {{baseUrl}}/admin/killswitch/inventory_service
Content-Type: application/json

{
  "feature": "inventory_service",
  "enabled": false,
  "reason": "Inventory service experiencing timeouts",
  "updated_by": "infrastructure_team"
}

### Disable inventory check requirement (allow orders without inventory check)
POST {{baseUrl}}/admin/killswitch/require_inventory_check
Content-Type: application/json

{
  "feature": "require_inventory_check",
  "enabled": false,
  "reason": "Bypass inventory check while service is down",
  "updated_by": "business_team"
}

### Test order creation with inventory service disabled but checks not required
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "user_id": "urgent_customer",
  "items": [{"product_id": "urgent_item", "quantity": 1, "price": 99.99}],
  "payment_method": "express_card",
  "total_amount": 99.99
}

### Re-enable inventory service
POST {{baseUrl}}/admin/killswitch/inventory_service
Content-Type: application/json

{
  "feature": "inventory_service",
  "enabled": true,
  "reason": "Inventory service issues resolved",
  "updated_by": "infrastructure_team"
}

### Re-enable inventory check requirement
POST {{baseUrl}}/admin/killswitch/require_inventory_check
Content-Type: application/json

{
  "feature": "require_inventory_check",
  "enabled": true,
  "reason": "Normal inventory checking resumed",
  "updated_by": "business_team"
}

###############################################
# 4. EMERGENCY OPERATIONS
###############################################

### Emergency disable multiple features
POST {{baseUrl}}/admin/emergency-disable
Content-Type: application/json

{
  "features": ["payment_processing", "email_notifications", "sms_notifications"],
  "reason": "Critical security incident - disabling external integrations",
  "duration_minutes": 30
}

### Check health after emergency disable
GET {{baseUrl}}/api/health

### Bulk enable features after emergency
POST {{baseUrl}}/admin/bulk-enable
Content-Type: application/json

{
  "features": ["email_notifications", "sms_notifications"],
  "reason": "Security incident resolved - re-enabling notifications"
}

### Emergency disable with unknown features (test error handling)
POST {{baseUrl}}/admin/emergency-disable
Content-Type: application/json

{
  "features": ["unknown_feature", "payment_processing", "fake_service"],
  "reason": "Testing error handling"
}

###############################################
# 5. AUTO-DISABLE TESTING
###############################################

### Simulate errors to trigger auto-disable (DO NOT USE IN PRODUCTION)
POST {{baseUrl}}/test/simulate-error/payment_processing?count=3

### Check error stats after simulation
GET {{baseUrl}}/admin/error-stats

### Simulate more errors to trigger auto-disable
POST {{baseUrl}}/test/simulate-error/payment_processing?count=5

### Check killswitch status after auto-disable
GET {{baseUrl}}/admin/killswitch/payment_processing

### Try creating order after auto-disable (should fail or create pending)
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "user_id": "test_after_auto_disable",
  "items": [{"product_id": "test_product", "quantity": 1, "price": 50.00}],
  "payment_method": "test_card",
  "total_amount": 50.00
}

### Manually re-enable after auto-disable
POST {{baseUrl}}/admin/killswitch/payment_processing
Content-Type: application/json

{
  "feature": "payment_processing",
  "enabled": true,
  "reason": "Manual override - payment issues resolved",
  "updated_by": "senior_engineer"
}

###############################################
# 6. EDGE CASES & ERROR TESTING
###############################################

### Test unknown feature
GET {{baseUrl}}/admin/killswitch/nonexistent_feature

### Test invalid killswitch toggle
POST {{baseUrl}}/admin/killswitch/invalid_feature
Content-Type: application/json

{
  "feature": "invalid_feature",
  "enabled": true,
  "reason": "Testing error handling",
  "updated_by": "tester"
}

### Test malformed order request - Missing required fields
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "user_id": "test"
}

### Test order with negative amount
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "user_id": "test_user",
  "items": [{"product_id": "refund", "quantity": 1, "price": -100.00}],
  "payment_method": "credit_card",
  "total_amount": -100.00
}

###############################################
# 7. MONITORING & OBSERVABILITY
###############################################

### Final health check
GET {{baseUrl}}/api/health

### Final killswitch states
GET {{baseUrl}}/admin/killswitches

### Final error statistics
GET {{baseUrl}}/admin/error-stats

###############################################
# 8. COMPREHENSIVE TEST SEQUENCE
###############################################

### Test Sequence 1: Normal Operations
# 1. Check health (should be healthy)
# 2. Create order (should succeed)
# 3. Check error stats (should be clean)

### Test Sequence 2: Planned Maintenance
# 1. Disable payment processing for maintenance
# 2. Create order (should create pending order)
# 3. Re-enable payment processing
# 4. Create order (should process payment)

### Test Sequence 3: Emergency Response
# 1. Emergency disable critical features
# 2. Check health (should show degraded)
# 3. Try operations (should fail gracefully)
# 4. Bulk re-enable featureswhat's
# 5. Verify recovery

### Test Sequence 4: Auto-Disable Simulation
# 1. Simulate errors to trigger auto-disable
# 2. Verify feature is disabled
# 3. Try operations (should fail/degrade gracefully)
# 4. Manual re-enable
# 5. Verify recovery

###############################################
# NOTES:
# - Replace {{baseUrl}} with your actual server URL
# - Ensure Redis is running for killswitch persistence
# - Monitor logs for killswitch state changes
# - Test in non-production environment first
# - Some endpoints simulate random failures for demo
###############################################
